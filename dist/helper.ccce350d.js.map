{"version":3,"sources":["helper.js","node_modules/parcel-bundler/src/builtins/hmr-runtime.js"],"names":["getPersonData","data","email","filter","d","Email","getPersonDataByActivity","personData","activity","Activity","substring","getPersonDataByActivityType","type","getPersonDataByActivities","list","includes","getPersonDataByActivitiesAndMood","actList","moodList","Feeling","getDataByPTypePData","everyoneData","typesData","pData","pType","column","cValue","filteredList","Personality","map","filteredEmailList","everyoneList","data1","data2","length","getFrequencyByKey","keys","next","value","getDataByPTypeValue","filteredListWithValue","Values","everyoneListWithValue","getActivityListByPType","emailList","getDataByPType","f","filteredData","filteredActivityData","groupActivityData","str","index","Map","i","key","split","has","set","get","sortedMap","entries","sort","a","b","getFrequencyByKeys","str1","str2","key2","getFrequencyByThreeKeys","str3","keyList","indexOf","key3","createMapFromPersonality","convertLongToShortMap","finalMap","getFrequencyFromPersonalityMap","personalityMap","key1","findMode","forEach","id","Object","maxKey","maxValue","reason","getAverageFromList","lst","reduce","findAvgMood","isRounded","count","mood","Math","round","getAverage","findAvgMoodByKey","findStdDevMood","avgMap","pow","sqrt","calculateStdDev","avg","total","n","findStdDevWithAvg","item","getTotalFrequencyFromMap","getKeyWithHighestValue","max","getEmailListForCategory","personalityData","category","personalityDataKey","p","categoryShortToLongMap","personality","initializeCountMaps","countMaps","incrementCategorySubMapCount","updateCountMapFromRecords","records","activityCountMap","reasonCountMap","moodCountMap","record","negativeMoods","groupMapByValue","push","calculatePercentageByKey","Array","from","k","getCountMapNegativePercentageFromRecords","totalRecordCountForActivity","getTopThreeActivities","activityMap","exclusionList","keysIter","finalList","getPercentageOfActivities","activityList","aggregateList","dCount","act","getPercentageOfActivitiesWithExclusion","tempList","getDistinctActivitiesAvg","dataList","size","getDistinctActivitiesWithExclusion","finalSet","Set","add","compareMoods","console","error","compareKeyList","OVERLAY_ID","OldModule","module","bundle","Module","moduleName","call","hot","hotData","_acceptCallbacks","_disposeCallbacks","accept","fn","dispose","checkedAssets","assetsToAccept","parent","isParcelRequire","WebSocket","hostname","location","protocol","ws","onmessage","event","JSON","parse","handled","assets","asset","isNew","didAccept","hmrAcceptCheck","global","parcelRequire","every","generated","js","clear","hmrApply","v","hmrAcceptRun","reload","close","onclose","log","removeErrorOverlay","message","stack","overlay","createErrorOverlay","document","body","appendChild","getElementById","remove","createElement","stackTrace","innerText","innerHTML","getParents","modules","parents","dep","isArray","concat","Function","deps","cached","cache","some","cb"],"mappings":"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","file":"helper.ccce350d.js","sourceRoot":"..","sourcesContent":["// Helper functions for data manipulation.\n\n/** \n *   data: list of data entries\n *   email: email of user\n *   returns list of all data entries for a person\n */\nfunction getPersonData(data, email) {\n    return data.filter(d => {\n        return d.Email == email\n    });\n}\n\n/** \n *   personData: list of data entries\n *   activity: activity to filter by\n *   returns list of personData entries by activity\n */\nfunction getPersonDataByActivity(personData, activity) {\n    return personData.filter(d => d.Activity.substring(0, 2) == activity);\n}\n\nfunction getPersonDataByActivityType(personData, type) {\n    return personData.filter(d => d.Activity.substring(0, 1) == type);\n}\n\nfunction getPersonDataByActivities(personData, list) {\n    return personData.filter(d => list.includes(d.Activity.substring(0, 2)));\n}\n\nfunction getPersonDataByActivitiesAndMood(personData, actList, moodList) {\n    return personData.filter(d => actList.includes(d.Activity.substring(0, 2)))\n        .filter(d => moodList.includes(d.Feeling));\n}\n\nfunction getDataByPTypePData(everyoneData, typesData, pData, pType, column, cValue) {\n    // list of ppl with personality type\n    let filteredList = typesData\n        .filter(d => d.Personality == pType)\n        .map(d => d[\"What's your email?\"]);\n\n    let filteredEmailList = pData.filter(d => d[column] == cValue)\n                                    .map(d => d[\"What's your email?\"])\n                                    .filter(d => filteredList.includes(d));\n    let everyoneList = pData.filter(d => d[column] == cValue).map(d => d[\"What's your email?\"]);\n\n    let data1 = everyoneData.filter(d => filteredEmailList.includes(d.Email));\n    let data2 = everyoneData.filter(d => everyoneList.includes(d.Email));\n\n    return [{\n        \"percent\": filteredEmailList.length/filteredList.length, \n        \"fMood\": getFrequencyByKey(\"Feeling\", data1).keys().next().value, \n        \"fAttitude\": getFrequencyByKey(\"Reason\", data1).keys().next().value\n    }, \n    {\n        \"percent\": everyoneList.length/typesData.length,\n        \"fMood\": getFrequencyByKey(\"Feeling\", data2).keys().next().value, \n        \"fAttitude\": getFrequencyByKey(\"Reason\", data2).keys().next().value\n    }];\n}\n\nfunction getDataByPTypeValue(everyoneData, typesData, pType, value) {\n    let filteredList = typesData\n        .filter(d => d.Personality == pType);\n\n    let filteredListWithValue = filteredList.filter(d => d.Values == value).map(d => d[\"What's your email?\"]);\n    let everyoneListWithValue = typesData.filter(d => d.Values == value).map(d => d[\"What's your email?\"]);\n\n    let data1 = everyoneData.filter(d => filteredListWithValue.includes(d.Email));\n    let data2 = everyoneData.filter(d => everyoneListWithValue.includes(d.Email));\n\n    return [{\n        \"percent\": filteredListWithValue.length/filteredList.length, \n        \"fMood\": getFrequencyByKey(\"Feeling\", data1).keys().next().value, \n        \"fAttitude\": getFrequencyByKey(\"Reason\", data1).keys().next().value\n    }, \n    {\n        \"percent\": everyoneListWithValue.length/typesData.length,\n        \"fMood\": getFrequencyByKey(\"Feeling\", data2).keys().next().value, \n        \"fAttitude\": getFrequencyByKey(\"Reason\", data2).keys().next().value\n    }];\n}\n\nfunction getActivityListByPType(everyoneData, typesData, pType) {\n    let emailList = typesData\n        .filter(d => d.Personality == pType)\n        .map(d => d[\"What's your email?\"]);\n\n    return everyoneData.filter(d => emailList.includes(d.Email));\n}\n\nfunction getDataByPType(everyoneData, typesData, pType, activity, f, moodList = []) {\n    let emailList = typesData\n        .filter(d => d.Personality == pType)\n        .map(d => d[\"What's your email?\"]);\n\n    let filteredData = everyoneData.filter(d => emailList.includes(d.Email));\n    let filteredActivityData;\n    if (moodList.length != 0) {\n        filteredActivityData = f(filteredData, activity, moodList);\n    } else {\n        filteredActivityData = f(filteredData, activity);\n    }\n    \n    let groupActivityData;\n    if (moodList.length != 0) {\n        groupActivityData = f(everyoneData, activity, moodList);\n    } else {\n        groupActivityData = f(everyoneData, activity);\n    }\n\n    if (moodList.length != 0) {\n        return [{\n            \"percent\": filteredActivityData.length/getPersonDataByActivities(filteredData, activity).length, \n            \"fMood\": getFrequencyByKey(\"Feeling\", groupActivityData).keys().next().value, \n            \"fAttitude\": getFrequencyByKey(\"Reason\", groupActivityData).keys().next().value\n        }, \n        {\n            \"percent\": groupActivityData.length/getPersonDataByActivities(everyoneData, activity).length,\n            \"fMood\": getFrequencyByKey(\"Feeling\", groupActivityData).keys().next().value, \n            \"fAttitude\": getFrequencyByKey(\"Reason\", groupActivityData).keys().next().value\n        }];\n    }\n\n    return [{\n        \"percent\": filteredActivityData.length/filteredData.length, \n        \"fMood\": getFrequencyByKey(\"Feeling\", groupActivityData).keys().next().value, \n        \"fAttitude\": getFrequencyByKey(\"Reason\", groupActivityData).keys().next().value\n    }, \n    {\n        \"percent\": groupActivityData.length/everyoneData.length,\n        \"fMood\": getFrequencyByKey(\"Feeling\", groupActivityData).keys().next().value, \n        \"fAttitude\": getFrequencyByKey(\"Reason\", groupActivityData).keys().next().value\n    }];\n}\n\n/** \n *   str: column name in excel, ie Activity, Reason, Feeling\n *   data: list of data entries \n *   index: used for split (ie. \"b5\" or \"Intellectual\")\n *   returns sorted map of keys to frequency, ie (\"b5: 24\")\n */\nfunction getFrequencyByKey(str, data, index = 0) {\n    let map = new Map();\n    for (var i = 0; i < data.length; i++) {\n        let key = data[i][str].split(\":\")[index];\n        if (!map.has(key)) {\n            map.set(key, 1);\n        } else {\n            map.set(key, map.get(key) + 1);\n        }\n    }\n\n    let sortedMap = new Map([...map.entries()].sort((a, b) => b[1] - a[1]));\n    return sortedMap;\n}\n\n/** \n *   data: list of data entries\n *   returns sorted map divided first by str1 then by str2\n */\nfunction getFrequencyByKeys(str1, str2, data) {\n    let map = {};\n    for (var i = 0; i < data.length; i++) {\n        let key = data[i][str1].split(\":\")[0];\n        let key2 = data[i][str2];\n        if (!(key in map)) {\n            map[key] = {};\n            map[key][key2] = 1\n        } else {\n            map[key][key2] = !(key2 in map[key]) ? 1 : (map[key][key2] + 1);\n        }\n    }\n\n    // var sortedMap = new Map([...map.entries()].sort((a, b) => b[1] - a[1]));\n    return map;\n}\n\n/** \n *   data: list of data entries\n *   returns sorted map divided first by str1 then by str2, then by str3\n */\nfunction getFrequencyByThreeKeys(str1, str2, str3, keyList, data) {\n    let map = {};\n    for (var i = 0; i < data.length; i++) {\n\n        let key = data[i][str1].split(\":\")[0];\n        if (keyList.indexOf(key) != -1) {\n            let key2 = data[i][str2];\n            let key3 = data[i][str3];\n            if (!(key in map)) {\n                map[key] = {};\n                map[key][key2] = {};\n                map[key][key2][key3] = 1;\n            } else if (!(key2 in map[key])) {\n                map[key][key2] = {};\n                map[key][key2][key3] = 1;\n            } else if (!(key3 in map[key][key2])) {\n                map[key][key2][key3] = 1;\n            } else {\n                map[key][key2][key3] = map[key][key2][key3] + 1;\n            }\n        }\n    }\n\n    return map;\n}\n\nfunction createMapFromPersonality(data, key, convertLongToShortMap = null) {\n    let finalMap = {};\n\n    for (var i = 0; i < data.length; i++) {\n        let email = data[i][\"What's your email?\"];\n        let value = data[i][key];\n        if (convertLongToShortMap != null) {\n            finalMap[email] = convertLongToShortMap[value];\n        } else {\n            finalMap[email] = value;\n        }\n    }\n\n    return finalMap;\n}\n\nfunction getFrequencyFromPersonalityMap(personData, personalityMap, key, index = 0) {\n    let map = {};\n    for (var i = 0; i < personData.length; i++) {\n        let email = personData[i][\"Email\"];\n        if (email in personalityMap) {\n            let key1 = personalityMap[email];\n            let key2 = personData[i][key].split(\":\")[index];\n\n            if (!(key1 in map)) {\n                map[key1] = {};\n                map[key1][key2] = 1\n            } else {\n                map[key1][key2] = !(key2 in map[key1]) ? 1 : (map[key1][key2] + 1);\n            }\n        }\n    }\n\n    return map;\n}\n\n/**\n *   keyList: list of keys, usually top 5/6 keys\n *   map: map of (all) keys to list of frequencies, ie \"b5: {\"Good\": 3, \"Ok\": 5}\"\n *   returns map of keys in keyList to mode of second breakdown, ie \"b5: Ok\"\n */\nfunction findMode(keyList, map) {\n    let finalMap = {};\n\n    keyList.forEach(function(id) {\n        var keys = Object.keys(map[id]);\n        var maxKey = \"\";\n        var maxValue = 0;\n\n        keys.forEach(function(reason) {\n            if (map[id][reason] > maxValue) {\n                maxKey = reason;\n                maxValue = map[id][reason]\n            }\n        });\n\n        finalMap[id] = maxKey;\n    });\n\n    return finalMap;\n}\n\nfunction getAverageFromList(lst) {\n    return lst.reduce((a, b) => a + b, 0) / lst.length\n}\n\n/**\n *   keyList: list of keys, usually top 5/6 keys\n *   map: map of (all) keys to list of frequencies, ie \"b5: {\"Good\": 3, \"Ok\": 5}\"\n *   returns map of keys in keyList to average moodLegend, starts at 0\n */\nfunction findAvgMood(keyList, map, isRounded = true) {\n    let finalMap = {};\n\n    keyList.forEach(function(id) {\n        let keys = Object.keys(map[id]);\n        let value = 0;\n        let count = 0;\n\n        keys.forEach(function(mood) {\n            value = value + map[id][mood] * (moodList.indexOf(mood));\n            count = count + map[id][mood];\n        });\n\n        finalMap[id] = isRounded ? Math.round(value / count) : value / count;\n    });\n\n    return finalMap;\n}\n\nfunction getAverage(list) {\n    return list.reduce((a, b) => a + b, 0) / list.length\n}\n\nfunction findAvgMoodByKey(personData, key, value, isRounded = true) {\n    let filteredData = personData.filter(d => d[key] == value);\n    var value = 0;\n\n    for (var d of filteredData) {\n        value += moodList.indexOf(d.Feeling);\n    }\n\n    return Math.round(value / filteredData.length);\n}\n\n/**\n *   keyList: list of keys, usually top 5/6 keys\n *   map: map of (all) keys to list of frequencies, ie \"b5: {\"Good\": 3, \"Ok\": 5}\"\n *   avgMap: map of keys to averages, ie \"b5: 2.722\"\n *   returns map of keys in keyList to average moodLegend, starts at 0\n */\nfunction findStdDevMood(keyList, map, avgMap) {\n    let finalMap = {};\n\n    keyList.forEach(function(id) {\n        let keys = Object.keys(map[id]);\n        let value = 0;\n        let count = 0;\n\n        keys.forEach(function(mood) {\n            value = value + map[id][mood] * Math.pow(moodList.indexOf(mood) - avgMap[id], 2);\n            count = count + map[id][mood];\n        });\n\n        finalMap[id] = Math.sqrt(value / count);\n    });\n\n    return finalMap;\n}\n\nfunction calculateStdDev(list, avg) {\n    var total = 0;\n\n    for (var n of list) {\n        total += Math.pow(n - avg, 2);\n    }\n    return Math.sqrt(total / list.length);\n}\n\nfunction findStdDevWithAvg(personData, key, value, avg) {\n    let filteredData = personData.filter(d => d[key] == value);\n    var value = 0;\n\n    for (var item of filteredData) {\n        value += item.Feeling * Math.pow(moodList.indexOf(item.Feeling) - avg, 2);\n    }\n\n    return Math.sqrt(value / filteredData.length);\n\n}\n\nfunction getTotalFrequencyFromMap(data) {\n    let keys = Object.keys(data);\n    let count = 0;\n\n    keys.forEach(function(key) {\n        count += data[key];\n    });\n\n    return count;\n}\n\nfunction getKeyWithHighestValue(map) {\n    let max = 0;\n    let maxKey = \"\";\n    let keyList = Object.keys(map);\n\n    keyList.forEach(function(d) {\n        if (map[d] > max) {\n            max = map[d];\n            maxKey = d;\n        }\n    });\n\n    return maxKey;\n}\n\n// Return users whose answer for [personalityDataKey] matches [category], in the form of their emails.\n// Example usage: return users whose daily stressor is work.\nfunction getEmailListForCategory(personalityData, category, personalityDataKey) {\n    return personalityData.filter(p => {\n        return p[personalityDataKey].includes(categoryShortToLongMap[category]);\n    }).map(p => {\n        return p[keys.personality.email];\n    })\n}\n\n// Initialize count map for long-term versus short-term personalityData records.\n// Example map structure: {long: {}, short: {}}\nfunction initializeCountMaps(countMaps) {\n    countMaps.forEach(map => {\n        map[\"long\"] = {};\n        map[\"short\"] = {};\n    });\n}\n\n// Increments count of map[type][key].\n// Example map structure: {long: {act1: 9, act2: 17}, short: {act1: 12, act2: 14}}\nfunction incrementCategorySubMapCount(map, type, key) {\n    let count = map[type][key];\n    map[type][key] = count == null ? 1 : count + 1;\n}\n\n// Update counts of activities/attitudes/moods from [records] for [type].\n// Example usage: updateCountMapFromRecords(longTermRecords, \"long\", activityCountMap, reasonCountMap, moodCountMap)\n// Example structure for moodCountMap: {long: {mood1: 9, mood2: 17}, short: {mood1: 12, mood2: 14}}\nfunction updateCountMapFromRecords(records, type, activityCountMap, reasonCountMap, moodCountMap) {\n    records.forEach(record => {\n        // Only update category maps if record has Bad or Awful for Feeling.\n        if (negativeMoods.includes(record[\"Feeling\"])) {\n            let activity = record[\"Activity\"].substring(0, 2);\n            let reason = record[\"Reason\"];\n            let mood = record[\"Feeling\"];\n\n            incrementCategorySubMapCount(activityCountMap, type, activity);\n            incrementCategorySubMapCount(reasonCountMap, type, reason);\n            incrementCategorySubMapCount(moodCountMap, type, mood);\n        }\n    });\n}\n\n\n// Given a map, create a new map using the values as keys\nfunction groupMapByValue(data) {\n    let finalMap = {};\n    let keys = Object.keys(data);\n\n    for (var i = 0; i < keys.length; i++) {\n        if (!(data[keys[i]] in finalMap)) {\n            finalMap[data[keys[i]]] = [keys[i]];\n        } else {\n            finalMap[data[keys[i]]].push(keys[i])\n        }\n    }\n    return finalMap;\n}\n\nfunction calculatePercentageByKey(data, key) {\n    let total = 0;\n    for (var k of Array.from(data.keys())) {\n        total += data.get(k);\n    }\n\n    return data.get(key) / total;\n}\n\nfunction getCountMapNegativePercentageFromRecords(records, type, activityCountMap, reasonCountMap, moodCountMap) {\n    updateCountMapFromRecords(records, type, activityCountMap, reasonCountMap, moodCountMap);\n    // Divide count of Bad/Awful feelings by total records for each activity.\n    Object.keys(activityCountMap[type]).forEach(a => {\n        let totalRecordCountForActivity = records.filter(record => { return record[\"Activity\"].substring(0, 2) == a }).length\n        activityCountMap[type][a] = activityCountMap[type][a] / totalRecordCountForActivity\n    })\n}\n\nfunction getTopThreeActivities(activityMap, exclusionList) {\n    let keysIter = activityMap.keys();\n    let finalList = [];\n\n    while (finalList.length < 3) {\n        var key = keysIter.next().value;\n        if (!exclusionList.includes(key + \":\")) {\n            finalList.push(key + \":\");\n        }\n    }\n\n    return finalList;\n}\n\nfunction getPercentageOfActivities(activityList, aggregateList, exclusionList) {\n    let count = 0;\n    for (var activity of activityList) {\n        count += getPersonDataByActivity(aggregateList, activity.substring(0, 2)).length;\n    }\n\n    let dCount = 0;\n    for (var act of exclusionList) {\n        dCount += getPersonDataByActivity(aggregateList, act.substring(0, 2)).length;\n    }\n\n    return count / (aggregateList.length - dCount);\n}\n\nfunction getPercentageOfActivitiesWithExclusion(activityList, aggregateList, exclusionList) {\n    let count = 0;\n    let dCount = 0;\n    let tempList = activityList.filter(d => {\n        return !exclusionList.includes(d + \":\");\n    });\n\n    for (var activity of tempList) {\n        // console.log(activity)\n        count += getPersonDataByActivity(aggregateList, activity).length;\n    }\n\n    return count / aggregateList.length;\n}\n\nfunction getDistinctActivitiesAvg(dataList, everyoneData, exclusionList) {\n    let count = 0;\n\n    for (var email of dataList) {\n        var personData = getPersonData(everyoneData, email);\n        let tempList = personData.filter(d => {\n            return !exclusionList.includes(d.Activity.substring(0, 3));\n        });\n        count += getFrequencyByKey(\"Activity\", tempList).size;\n    }\n\n    return count / dataList.length;\n}\n\nfunction getDistinctActivitiesWithExclusion(data, exclusionList) {\n    let finalSet = new Set();\n    for (var item of Array.from(data.keys())) {\n        if (!exclusionList.includes(item + \":\")) {\n            finalSet.add(item);\n        }\n    }\n    return finalSet;\n}\n\n// Compare functions.\n\n// Compare moods by amazing to awful.\nfunction compareMoods(a, b) {\n    let moodList = [\"Awful\", \"Bad\", \"Ok\", \"Good\", \"Amazing\"];\n    if (moodList.indexOf(a) == -1 || moodList.indexOf(b) == -1) {\n        console.error(\"compareMoods invalid inputs - \" + a + \", \" + b);\n        return 0;\n    }\n    return moodList.indexOf(b) - moodList.indexOf(a);\n}\n\n// Compare personData activites by most to least entries.\nfunction compareKeyList(a, b, personData) {\n    return getPersonDataByActivity(personData, b).length - getPersonDataByActivity(personData, a).length;\n}","var OVERLAY_ID = '__parcel__error__overlay__';\n\nvar OldModule = module.bundle.Module;\n\nfunction Module(moduleName) {\n  OldModule.call(this, moduleName);\n  this.hot = {\n    data: module.bundle.hotData,\n    _acceptCallbacks: [],\n    _disposeCallbacks: [],\n    accept: function (fn) {\n      this._acceptCallbacks.push(fn || function () {});\n    },\n    dispose: function (fn) {\n      this._disposeCallbacks.push(fn);\n    }\n  };\n\n  module.bundle.hotData = null;\n}\n\nmodule.bundle.Module = Module;\nvar checkedAssets, assetsToAccept;\n\nvar parent = module.bundle.parent;\nif ((!parent || !parent.isParcelRequire) && typeof WebSocket !== 'undefined') {\n  var hostname = process.env.HMR_HOSTNAME || location.hostname;\n  var protocol = location.protocol === 'https:' ? 'wss' : 'ws';\n  var ws = new WebSocket(protocol + '://' + hostname + ':' + process.env.HMR_PORT + '/');\n  ws.onmessage = function(event) {\n    checkedAssets = {};\n    assetsToAccept = [];\n\n    var data = JSON.parse(event.data);\n\n    if (data.type === 'update') {\n      var handled = false;\n      data.assets.forEach(function(asset) {\n        if (!asset.isNew) {\n          var didAccept = hmrAcceptCheck(global.parcelRequire, asset.id);\n          if (didAccept) {\n            handled = true;\n          }\n        }\n      });\n\n      // Enable HMR for CSS by default.\n      handled = handled || data.assets.every(function(asset) {\n        return asset.type === 'css' && asset.generated.js;\n      });\n\n      if (handled) {\n        console.clear();\n\n        data.assets.forEach(function (asset) {\n          hmrApply(global.parcelRequire, asset);\n        });\n\n        assetsToAccept.forEach(function (v) {\n          hmrAcceptRun(v[0], v[1]);\n        });\n      } else if (location.reload) { // `location` global exists in a web worker context but lacks `.reload()` function.\n        location.reload();\n      }\n    }\n\n    if (data.type === 'reload') {\n      ws.close();\n      ws.onclose = function () {\n        location.reload();\n      }\n    }\n\n    if (data.type === 'error-resolved') {\n      console.log('[parcel] ✨ Error resolved');\n\n      removeErrorOverlay();\n    }\n\n    if (data.type === 'error') {\n      console.error('[parcel] 🚨  ' + data.error.message + '\\n' + data.error.stack);\n\n      removeErrorOverlay();\n\n      var overlay = createErrorOverlay(data);\n      document.body.appendChild(overlay);\n    }\n  };\n}\n\nfunction removeErrorOverlay() {\n  var overlay = document.getElementById(OVERLAY_ID);\n  if (overlay) {\n    overlay.remove();\n  }\n}\n\nfunction createErrorOverlay(data) {\n  var overlay = document.createElement('div');\n  overlay.id = OVERLAY_ID;\n\n  // html encode message and stack trace\n  var message = document.createElement('div');\n  var stackTrace = document.createElement('pre');\n  message.innerText = data.error.message;\n  stackTrace.innerText = data.error.stack;\n\n  overlay.innerHTML = (\n    '<div style=\"background: black; font-size: 16px; color: white; position: fixed; height: 100%; width: 100%; top: 0px; left: 0px; padding: 30px; opacity: 0.85; font-family: Menlo, Consolas, monospace; z-index: 9999;\">' +\n      '<span style=\"background: red; padding: 2px 4px; border-radius: 2px;\">ERROR</span>' +\n      '<span style=\"top: 2px; margin-left: 5px; position: relative;\">🚨</span>' +\n      '<div style=\"font-size: 18px; font-weight: bold; margin-top: 20px;\">' + message.innerHTML + '</div>' +\n      '<pre>' + stackTrace.innerHTML + '</pre>' +\n    '</div>'\n  );\n\n  return overlay;\n\n}\n\nfunction getParents(bundle, id) {\n  var modules = bundle.modules;\n  if (!modules) {\n    return [];\n  }\n\n  var parents = [];\n  var k, d, dep;\n\n  for (k in modules) {\n    for (d in modules[k][1]) {\n      dep = modules[k][1][d];\n      if (dep === id || (Array.isArray(dep) && dep[dep.length - 1] === id)) {\n        parents.push(k);\n      }\n    }\n  }\n\n  if (bundle.parent) {\n    parents = parents.concat(getParents(bundle.parent, id));\n  }\n\n  return parents;\n}\n\nfunction hmrApply(bundle, asset) {\n  var modules = bundle.modules;\n  if (!modules) {\n    return;\n  }\n\n  if (modules[asset.id] || !bundle.parent) {\n    var fn = new Function('require', 'module', 'exports', asset.generated.js);\n    asset.isNew = !modules[asset.id];\n    modules[asset.id] = [fn, asset.deps];\n  } else if (bundle.parent) {\n    hmrApply(bundle.parent, asset);\n  }\n}\n\nfunction hmrAcceptCheck(bundle, id) {\n  var modules = bundle.modules;\n  if (!modules) {\n    return;\n  }\n\n  if (!modules[id] && bundle.parent) {\n    return hmrAcceptCheck(bundle.parent, id);\n  }\n\n  if (checkedAssets[id]) {\n    return;\n  }\n  checkedAssets[id] = true;\n\n  var cached = bundle.cache[id];\n\n  assetsToAccept.push([bundle, id]);\n\n  if (cached && cached.hot && cached.hot._acceptCallbacks.length) {\n    return true;\n  }\n\n  return getParents(global.parcelRequire, id).some(function (id) {\n    return hmrAcceptCheck(global.parcelRequire, id)\n  });\n}\n\nfunction hmrAcceptRun(bundle, id) {\n  var cached = bundle.cache[id];\n  bundle.hotData = {};\n  if (cached) {\n    cached.hot.data = bundle.hotData;\n  }\n\n  if (cached && cached.hot && cached.hot._disposeCallbacks.length) {\n    cached.hot._disposeCallbacks.forEach(function (cb) {\n      cb(bundle.hotData);\n    });\n  }\n\n  delete bundle.cache[id];\n  bundle(id);\n\n  cached = bundle.cache[id];\n  if (cached && cached.hot && cached.hot._acceptCallbacks.length) {\n    cached.hot._acceptCallbacks.forEach(function (cb) {\n      cb();\n    });\n    return true;\n  }\n}\n"]}